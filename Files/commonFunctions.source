#!/bin/bash

###########################FUNCTION START###########################
get_pcid() {
  #User input to see if new or existing
  break_line > /dev/stderr
  read -p "Please scan or enter PCID${1}: " pcidChoice
  echo > /dev/stderr
  pcidChoice="$(add_id ${pcidChoice})"
  echo "${pcidChoice}"
}

###########################FUNCTION START###########################
#echo out breakline for aethetics
break_line() {
  echo -e '***************************************************************'
}

###########################FUNCTION START###########################
#Get formatted datetime
c_timestamp() {
  date | awk '{print $2,$3,$4}' #return formatted date to parent
}

###########################FUNCTION START###########################
#Get formatted date
today_date() {
  date | awk '{print $2,$3,$6}' #return formatted date to parent
}

###########################FUNCTION START###########################
#Get hdd blkid choice from user, and return blkid
choose_blkid() {
  #Set blkidList to blank
  blkidList=()

  #Check to see if need selection list for hdds or for partitions, and set appropriate parameters
  if [ "${1}" == 'p' ]; then
    idType="partition"
    grepWord="part"
  elif [ "${1}" == 'h' ]; then
    idType="hdd"
    grepWord="disk"
  else
    echo 'Usage: choose_blkid p (for partition) or choose_blkid h (for hdd)' #Display usage if used without "p" or "h" as first arg
    return 1
  fi

  PS3=$'\n'"Please select a ${idType}: " #Change the prompt for the select loop later

  while read -r blkid; do
    blkidList+=("${blkid}") #Adding each blkid (ie sda sdb2 sdc3 ...) to an array called hddList or partionList
  done <<< "$(lsblk -o name,size,type,fstype,mountpoint | grep ${grepWord} | awk '{print $1,$2,$4,$5}')" #This runs this command in a subshell each time and returns a single string followed by a newline to stdout, in this case to our read command at the beginning of the while loop

  #Save old column number, and set columns to 1 to give nice list
  OCOLUMNS="$COLUMNS"
  COLUMNS=1

  #show list
  select opt in "${blkidList[@]}"; do #Start of select statement
    myChoice="$(echo ${opt} | awk '{print $1}')" #get the blkid of hdd (ie if choice was "sda 114G" get just "sda" and store it in myChoice
    break #break out of the select after making choice
  done

  #Reset columns var to normal, and clear blkidList array
  COLUMNS="$OCOLUMNS"
  blkidList=()

  if [ "${idType}" == 'partition' ]; then
    echo "${myChoice:2}" #return blkid leaving out wierd branch arrow symblol
  else
    echo "${myChoice}" #return blkid to parent process
  fi
}

###########################FUNCTION START###########################
#check for root priveledges
root_check() {
  if [ "$EUID" -eq 0 ]; then
    echo "y" #return "y" to parent process
  else
    echo "n" #return "n" to parent process
  fi
}

###########################FUNCTION START###########################
#Quick internet check
internet_check() {
  if $(ping -c 1 google.com >> /dev/null 2>&1); then
    echo "y" #return "y" to parent process
  else
    echo "n" #return "n" to parent process
  fi
}

###########################FUNCTION START###########################
#Add ID to beginning to PCID if not present
add_id() {
  PCID="${1}" #Grap PCID from arg1
  [ "${PCID}" != 'o' -a "${PCID:0:2}" != 'ID' -a "${PCID}" != 'n' ] && PCID=$(echo ${PCID} | sed -e 's/^/ID/') #If PCID isn't an "o" or have ID already in front of the number, and the letters "ID"
  echo ${PCID} #return formated PCID out to parent
}

###########################FUNCTION START###########################
#return windows version
get_windows_version() {
  #set reg tree location and subkey
  regPath="Microsoft\Windows NT\CurrentVersion"
  subKey="ProductName"

  #make sure hivexget is installed
  which hivexget > /dev/null || echo "Installing registry program. Please wait..." && sudo apt install -qq libhivex-bin > /dev/null 2>/dev/null #if not install it

  #assign arg 1 as the windows directory
  windowsDirectory="${1}"

  #if not passed a valid windows directory, then run mount windows to return one
  [ ! $(find "${windowsDirectory}" -maxdepth 1 -type d -iname 'windows' 2> /dev/null) ] && windowsDirectory="$(mount_windows ro)"

  #get the location of the config folder and the SOFTWARE hive location
  hiveFolder=$(find "${windowsDirectory}" -maxdepth 3 -ipath "*/windows/system32/config")
  hiveFile=$(find "${hiveFolder}" -maxdepth 1 -type f -iname 'software')

  #run hivexget to return the product name
  windowsVersion=$(hivexget "${hiveFile}" "${regPath}" "${subKey}")

  #return the Product name subkey
  echo "${windowsVersion}"

  #exit cleanly
  return 0
}

###########################FUNCTION START###########################
#Mount Windows HDD
mount_windows() {
  defaultLocation="$HOME/winMount" #Set default mount location
  windowsPartition="$(lsblk -o name,parttype,partflags | grep -E '(0x7|ebd0a0a2-b9e5-4433-87c0)' | grep -v '0x80' | awk '{print $1}')"
  partitionCount="$(echo ${windowsPartition} | wc -w)" #count how many cadidates we found for windows partitions
  [ "${partitionCount}" -eq 1 ] && windowsPartition="$(echo ${windowsPartition} | grep -v '0x80' | awk '{print $1}')"
  findMounted="$(mount | grep 'fuseblk')" #find any already mounted windows partitions
  mountCount="$(echo ${findMounted} | wc -w)"
  mode="${1}"
  [ "${mode}" == 'rw' ] && mode="${mode},remove_hiberfile"
  [ -z "${mode}" ] && mode='ro'

  #Exit function and return 1 if no possible windows partitions are found
  [ -z "${windowsPartition}" ] && return 1

  #Check if partition already mounted first
  if [ "${mountCount}" -eq 6 ]; then
    if [ "${mode}" == 'rw,remove_hiberfile' -a ! "$(echo ${findMounted} | grep 'rw')" ]; then
      windowsPartition="$(echo ${findMounted} | awk '{print $1}' | sed 's:.*/::')"
    else
      mountedLocation="$(echo ${findMounted} | awk '{print $3}')"
      if [ -d "${mountedLocation}/Users" -o -d "${mountedLocation}/Documents and Settings" ]; then #if either users or documents and settings (for xp) folder found then mounted right
        echo "${mountedLocation}" #return the default path to parent
        return 0
      else
        windowsPartition="$(choose_blkid p)"
      fi #if partition alreaded mounted, get the path its mounted to and set to variable
    fi
  elif [ "${partitionCount}" -ne 1 ]; then
    windowsPartition="$(choose_blkid p)"
  else
    windowsPartition="${windowsPartition:2}"
  fi

  #mount the partition to the default location
  mkdir -p "${defaultLocation}"
  sudo umount -l /dev/${windowsPartition} > /dev/null 2>&1
  [ "${mode}" == 'rw,remove_hiberfile' ] && sudo ntfsfix /dev/${windowsPartition} > /dev/null 2>&1 #if want to mount rw, use ntfsfix first
  sudo mount -o ${mode} /dev/${windowsPartition} "${defaultLocation}" 2> /dev/null
  if [ "$(find ${defaultLocation} -maxdepth 1 -type d -iname 'Windows')" ]; then #if either users or documents and settings (for xp) folder found then mounted right
    echo "${defaultLocation}" #return the default path to parent
  else
    return 1 #return error code 1 if could mount properly
  fi
}

#Run function if sourced with argument
[ "${1}" ] && "${1}"
